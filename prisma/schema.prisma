datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

generator nexusPrisma {
  provider = "nexus-prisma"
}

model TempUserInfo {
  id String @id @default(uuid())

  provider    Provider
  providerUid String   @db.VarChar(320)

  firstName String @db.VarChar(20)
  lastName  String @db.VarChar(20)

  // Optional
  email String? @db.VarChar(320)

  @@unique([provider, providerUid], name: "providerInfo")
}

model User {
  id      String  @id
  profile Profile @relation("UserProfile", fields: [id], references: [id])

  provider    Provider
  providerUid String   @db.VarChar(320)
  username    String   @unique @db.VarChar(20)

  firstName String @db.VarChar(20)
  lastName  String @db.VarChar(20)

  // Optional
  avatar String? @db.VarChar(20) /// This is not a url to the avatar but more of an id of a choice that's determined by the frontend

  joinedAt  DateTime  @default(now())
  deletedAt DateTime?

  reputation Int @default(0) @db.UnsignedInt

  // Counters
  followersCount Int @default(0) @db.UnsignedInt
  followingCount Int @default(0) @db.UnsignedInt

  discussionsCount Int @default(0) @db.UnsignedInt
  questionsCount   Int @default(0) @db.UnsignedInt
  articlesCount    Int @default(0) @db.UnsignedInt

  commentsCount Int @default(0) @db.UnsignedInt
  answersCount  Int @default(0) @db.UnsignedInt

  // 1-m Relations
  posts    Post[]    @relation("UserPosts")
  comments Comment[] @relation("UserComments")

  // Self relations
  followers User[] @relation("UserFollowers", references: [id])
  following User[] @relation("UserFollowers", references: [id])

  // Explicit m-n relations
  postsVotes    PostVote[]
  postsViews    PostView[]
  postsShares   PostShare[]
  commentsVotes CommentVote[]

  @@unique([provider, providerUid], name: "providerInfo")
}

model Profile {
  id String @id @default(uuid())

  locale Locale

  // Optional
  bio String @default("") @db.VarChar(300)

  universityId Int? @db.SmallInt
  collegeId    Int? @db.SmallInt
  year         Int? @db.SmallInt

  // 1-1 relations
  user User? @relation("UserProfile") //TODO What happens to Profile if User is deleted ??
}

model Post {
  id String @id @default(uuid())

  type PostType

  authorId String
  author   User   @relation("UserPosts", fields: [authorId], references: [id])

  title String @db.VarChar(300)
  body  String @db.Text

  // Optional
  universityId Int? @db.SmallInt
  collegeId    Int? @db.SmallInt
  year         Int? @db.SmallInt
  tagsIds      Json

  createdAt DateTime  @default(now())
  deletedAt DateTime?

  attachments      Json? /// list of urls of images, videoes, any other downloadable file e.g pdfs (Only available for discussion posts)
  coverUrl         String? // Only available for article posts
  acceptedAnswerId String?  @unique // Only available for question posts
  acceptedAnswer   Comment? @relation("QuestionAcceptedAnswer", fields: [acceptedAnswerId], references: [id])

  // Counters
  votesCount     Int @default(0) @db.UnsignedInt
  upvotesCount   Int @default(0) @db.UnsignedInt
  downvotesCount Int @default(0) @db.UnsignedInt

  viewsCount  Int @default(0) @db.UnsignedInt
  sharesCount Int @default(0) @db.UnsignedInt

  commentsCount Int  @default(0) @db.UnsignedInt
  answersCount  Int? @db.UnsignedInt

  ranking Int @default(0) @db.UnsignedInt

  // 1-n relations
  comments Comment[] @relation("PostComments")

  answers Comment[] @relation("QuestionAnswers")

  edits PostEdit[] @relation("PostEdit")

  // Explicit m-n realtions
  votes  PostVote[]
  views  PostView[]
  shares PostShare[]
}

model PostEdit {
  id String @id @default(uuid())

  postId String
  post   Post   @relation("PostEdit", fields: [postId], references: [id])

  // Optional
  title       String? @db.VarChar(300) /// Null means no change
  body        String? @db.Text /// Null means no change  
  attachments Json? /// DbNull means no change or type of post is not discussion. However, JsonNull referes to a change.
  coverUrl    String? // Null means no change or type of post is not article

  editedAt DateTime @default(now())
}

// Relations
// discussion Discussion? @relation("DiscussionPost")
// question   Question?   @relation("QuestionPost")
// article    Article?    @relation("ArticlePost")

// model Discussion {
//   id   String @id
//   post Post   @relation("DiscussionPost", fields: [id], references: [id])
// }
//
// model Question {
//   id   String @id
//   post Post   @relation("QuestionPost", fields: [id], references: [id])

// }
//
// model Article {
//   id   String @id
//   post Post   @relation("ArticlePost", fields: [id], references: [id])
// }

// model Answer {
//   id Int @id @default(autoincrement())
//
//   question   Question @relation("QuestionAnswers", fields: [questionId], references: [id])
//   questionId Int
// }

model Comment {
  id String @id @default(uuid())

  authorId String
  author   User   @relation("UserComments", fields: [authorId], references: [id])

  postId String
  post   Post   @relation("PostComments", fields: [postId], references: [id])

  body        String @db.Text
  attachments Json

  // Optional
  parentReplyId String? // TODO I am not sure if this should be required
  parentReply   Comment?  @relation("CommentReplies", fields: [parentReplyId], references: [id])
  replies       Comment[] @relation("CommentReplies")

  createdAt DateTime @default(now())

  deletedAt DateTime?

  // Relations

  edits CommentEdit[] @relation("CommentEdit")

  // Explicit m-n Relations
  votes CommentVote[]

  // Counters
  votesCount     Int @default(0) @db.UnsignedInt
  upvotesCount   Int @default(0) @db.UnsignedInt
  downvotesCount Int @default(0) @db.UnsignedInt

  repliesCount Int @default(0) @db.UnsignedInt

  ranking Int @default(0) @db.UnsignedInt

  // As answer
  questionId String? // TODO postId and questionId refer to the same string
  question   Post?   @relation("QuestionAnswers", fields: [questionId], references: [id])

  accepetedAnswerTo Post? @relation("QuestionAcceptedAnswer")
}

model CommentEdit {
  id String @id @default(uuid())

  commentId String
  comment   Comment @relation("CommentEdit", fields: [commentId], references: [id])

  // Optional
  body        String? @db.Text /// Null means no change  
  attachments Json? /// DbNull means no change. However, JsonNull referes to a change.

  editedAt DateTime @default(now())
}

//=================================
// Enums
//=================================

enum Provider {
  GOOGLE
}

enum Locale {
  ARABIC
  ENGLISH
}

enum PostType {
  DISCUSSION
  QUESTION
  ARTICLE
}

//=================================
// Relation tables
//=================================

model PostVote {
  voterId String
  voter   User   @relation(fields: [voterId], references: [id])

  postId String
  post   Post   @relation(fields: [postId], references: [id])

  at      DateTime @default(now())
  upvoted Boolean

  @@id([voterId, postId])
}

model CommentVote {
  voterId String
  voter   User   @relation(fields: [voterId], references: [id])

  commentId String
  comment   Comment @relation(fields: [commentId], references: [id])

  at      DateTime @default(now())
  upvoted Boolean

  @@id([voterId, commentId])
}

model PostView {
  viewerId String
  viewer   User   @relation(fields: [viewerId], references: [id])

  postId String
  post   Post   @relation(fields: [postId], references: [id])

  at DateTime @default(now())

  @@id([viewerId, postId])
}

model PostShare {
  sharingId String
  sharing   User   @relation(fields: [sharingId], references: [id])

  postId String
  post   Post   @relation(fields: [postId], references: [id])

  at DateTime @default(now())

  @@id([sharingId, postId])
}
