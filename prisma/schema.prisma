datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator nexusPrisma {
  provider = "nexus-prisma"
}

model User {
  id          Int      @id @default(autoincrement())
  provider    Provider
  providerUid String
  username    String   @unique
  firstName   String
  lastName    String

  email    String?
  /// isActive is false if the user is banned
  isActive Boolean  @default(true)
  /// This is not a url to the avatar but more of a choice that's determined by the frontend
  avatar   String?
  joinedAt DateTime @default(now())

  isVerified Boolean @default(false)
  reputation Int     @default(0) //TODO maybe you should start with a value greater than zero

  // Counters
  followersCount Int @default(0)
  followingCount Int @default(0)

  // Relations
  profile  Profile?  @relation("UserProfile")
  posts    Post[]    @relation("UserPosts")
  comments Comment[] @relation("UserComments")

  // Self relations
  followers User[] @relation("UserFollowers", references: [id])
  following User[] @relation("UserFollowers", references: [id])

  // Explicit m-n relations
  postsVotes    PostVote[]
  postsViews    PostView[]
  postsShares   PostShare[]
  commentsVotes CommentVote[]

  @@unique([provider, providerUid])
}

model Profile {
  userId Int  @id
  user   User @relation("UserProfile", fields: [userId], references: [id])

  bio    String @default("")
  locale Locale @default(ARABIC)

  university Int
  college    Int
  year       Int
}

model Post {
  id Int @id @default(autoincrement())

  authorId Int
  author   User @relation("UserPosts", fields: [authorId], references: [id])

  title       String
  body        String?
  attachments Json /// list of urls of images, videoes, any other downloadable file e.g pdfs

  createdAt DateTime @default(now())

  university Int
  college    Int
  year       Int
  tags       Json

  // Counters
  upvotesCount   Int @default(0)
  downvotesCount Int @default(0)
  viewsCount     Int @default(0)
  sharesCount    Int @default(0)
  commentsCount  Int @default(0)

  // Relations
  discussion Discussion? @relation("DiscussionPost")
  question   Question?   @relation("QuestionPost")
  article    Article?    @relation("ArticlePost")

  comments Comment[] @relation("PostComments")

  // Explicit m-n realtions
  votes  PostVote[]
  views  PostView[]
  shares PostShare[]
}

model Discussion {
  id Int @id @default(autoincrement())

  postId Int  @unique
  post   Post @relation("DiscussionPost", fields: [postId], references: [id])
}

model Question {
  id Int @id @default(autoincrement())

  postId Int  @unique
  post   Post @relation("QuestionPost", fields: [postId], references: [id])

  answers Answer[] @relation("QuestionAnswers")
}

model Answer {
  id Int @id @default(autoincrement())

  question   Question @relation("QuestionAnswers", fields: [questionId], references: [id])
  questionId Int
}

model Article {
  id Int @id @default(autoincrement())

  postId Int  @unique
  post   Post @relation("ArticlePost", fields: [postId], references: [id])
}

model Comment {
  id Int @id @default(autoincrement())

  authorId Int
  author   User @relation("UserComments", fields: [authorId], references: [id])

  postId Int
  post   Post @relation("PostComments", fields: [postId], references: [id])

  parentReplyId Int? // TODO I am not sure if this should be required
  parentReply   Comment?  @relation("CommentReplies", fields: [parentReplyId], references: [id])
  replies       Comment[] @relation("CommentReplies")

  body        String
  attachments Json

  createdAt DateTime @default(now())

  // Counters
  upvotesCount   Int @default(0)
  downvotesCount Int @default(0)

  // Explicit m-n Relations
  votes CommentVote[]
}

//=================================
// Enums
//=================================

enum Provider {
  GOOGLE
}

enum Locale {
  ARABIC
  ENGLISH
}

//=================================
// Relation tables
//=================================

model PostVote {
  voter   User @relation(fields: [voterId], references: [id])
  voterId Int

  post   Post @relation(fields: [postId], references: [id])
  postId Int

  /// Takes true in case of upvote and false in case of downvote
  at      DateTime @default(now())
  upvoted Boolean

  @@id([voterId, postId])
}

model CommentVote {
  voter   User @relation(fields: [voterId], references: [id])
  voterId Int

  comment   Comment @relation(fields: [commentId], references: [id])
  commentId Int

  /// Takes true in case of upvote and false in case of downvote
  at      DateTime @default(now())
  upvoted Boolean

  @@id([voterId, commentId])
}

model PostView {
  viewer   User @relation(fields: [viewerId], references: [id])
  viewerId Int

  post   Post @relation(fields: [postId], references: [id])
  postId Int

  at DateTime @default(now())

  @@id([viewerId, postId])
}

model PostShare {
  sharing   User @relation(fields: [sharingId], references: [id])
  sharingId Int

  post   Post @relation(fields: [postId], references: [id])
  postId Int

  at DateTime @default(now())

  @@id([sharingId, postId])
}
