### This file was generated by Nexus Schema
### Do not make changes to this file directly


"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
@see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt
"""
scalar BigInt

"""The `Byte` scalar type represents byte value as a Buffer"""
scalar Bytes

type Comment {
  attachments: [String!]
  author: User!
  authorId: String!
  body: String!
  createdAt: DateTime!
  downvotesCount: Int!
  id: ID!
  parentReply: Comment
  parentReplyId: String
  post: Post!
  postId: String!
  upvotesCount: Int!
  votesCount: Int!
}

type CommentConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [CommentEdge!]!

  """Flattened list of Comment type"""
  nodes: [Comment!]!

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

input CommentCreateInput {
  attachments: [String!]
  body: String!
  parentReplyId: String
  postId: String!
}

type CommentEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: Comment!
}

input CommentEditInput {
  attachments: [String!]
  body: String!
}

enum CommentsSortingOption {
  MOST_ACTIVE
  MOST_RECENT
  MOST_VOTED
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""An arbitrary-precision Decimal type"""
scalar Decimal

type EduOrgs {
  colleges: Json!
  tags: Json!
  universities: Json!
}

type EduOrgsInfo {
  eduOrgs: EduOrgs
  version: Int!
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar Json @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

enum Locale {
  ARABIC
  ENGLISH
}

type LoginResponse {
  accessToken: String!
}

type Mutation {
  createComment(commentCreateInput: CommentCreateInput!, isAnswer: Boolean!): Boolean!
  createPost(postCreateInput: PostCreateInput!): ID!

  """
  Calling this mutation if user is already created will result in an error
  """
  createUser(userCreateInput: UserCreateInput!): LoginResponse!
  deleteComment(id: ID!): Boolean!
  deletePost(id: ID!): ID!
  editComment(commentEditInput: CommentEditInput!, id: ID!): Boolean!
  editPost(id: ID!, postEditInput: PostEditInput!): Boolean!

  """
  Create an access token for the user and put it in a cookie. if the user doesn't exist, an id is generated to make the token and the user info from provider is saved in a TempUserInfo record
  """
  loginWithProvider(code: String!, provider: Provider!): LoginResponse!

  """Logout for web client to clear the auth http-only cookie"""
  logout: Boolean!
}

"""
PageInfo cursor, as defined in https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  The cursor corresponding to the last nodes in edges. Null if the connection is empty.
  """
  endCursor: String

  """
  Used to indicate whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Used to indicate whether more edges exist prior to the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """
  The cursor corresponding to the first nodes in edges. Null if the connection is empty.
  """
  startCursor: String
}

type Post {
  acceptedAnswer: Comment
  acceptedAnswerId: String
  answersCount: Int
  attachments: [String!]
  author: User!
  authorId: String!
  body: String!
  collegeId: Int
  commentsCount: Int!
  coverUrl: String
  createdAt: DateTime!
  downvotesCount: Int!
  id: ID!
  isPublished: Boolean!
  ranking: Int!
  sharesCount: Int!
  tagsIds: [String!]
  title: String!
  type: PostType!
  universityId: Int
  upvotesCount: Int!
  viewsCount: Int!
  votesCount: Int!
  year: Int
}

type PostConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [PostEdge!]!

  """Flattened list of Post type"""
  nodes: [Post!]!

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

input PostCreateInput {
  attachments: [String!]
  body: String!
  collegeId: Int
  coverUrl: String
  isPublished: Boolean!
  tagsIds: [String!]
  title: String!
  type: PostType!
  universityId: Int
  year: Int
}

type PostEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: Post!
}

input PostEditInput {
  attachments: [String!]
  body: String!
  collegeId: Int
  coverUrl: String
  isPublished: Boolean!
  tagsIds: [String!]
  title: String!
  universityId: Int
  year: Int
}

enum PostType {
  ARTICLE
  DISCUSSION
  QUESTION
}

enum PostsSortingOption {
  MOST_RECENT
  MOST_VOTED
  TRENDING
}

input PostsWhereInput {
  authorId: String
  collegeId: Int
  isPublished: Boolean
  tagsIds: [String!]
  type: PostType!
  universityId: Int
  year: Int
}

type Profile {
  bio: String!
  collegeId: Int
  locale: Locale!
  universityId: Int
  year: Int
}

enum Provider {
  GOOGLE
}

type Query {
  comment(id: ID!): Comment!
  comments(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the first n elements from the list."""
    first: Int!
    parentReplyId: String
    postId: String!
    queryAnswers: Boolean!
    sorting: CommentsSortingOption!
  ): CommentConnection!

  """
  cachedVersion is compared to the current version to decide if we need to send data back or not. the version is always sent back
  """
  eduOrgsInfo(cachedVersion: Int): EduOrgsInfo!
  fakeLogin(userId: String!): LoginResponse!
  me: User!
  newsfeed(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the first n elements from the list."""
    first: Int!
  ): PostConnection!
  post(id: ID!): Post!

  """
  If isPublished is false, authorId must be provided and the user must be authenticated
  """
  posts(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the first n elements from the list."""
    first: Int!
    postsWhereInput: PostsWhereInput!
    sorting: PostsSortingOption!
  ): PostConnection!

  """
  Only exists if the user logged in for the first time and gets removed after the user is created
  """
  tempUserInfo: TempUserInfo!
}

type TempUserInfo {
  email: String
  firstName: String!
  id: ID!
  lastName: String!
  username: String!
}

type User {
  answersCount: Int!
  articlesCount: Int!

  """
  This is not a url to the avatar but more of an id of a choice that's determined by the frontend
  """
  avatar: String
  commentsCount: Int!
  discussionsCount: Int!
  firstName: String!
  followersCount: Int!
  followingCount: Int!
  id: ID!
  joinedAt: DateTime!
  lastName: String!
  profile: Profile!
  provider: Provider!
  questionsCount: Int!
  reputation: Int!
  username: String!
}

input UserCreateInput {
  """
  This is not a url to the avatar but more of an id of a choice that's determined by the frontend
  """
  avatar: String
  bio: String!
  collegeId: Int
  firstName: String!
  lastName: String!
  locale: Locale!
  universityId: Int
  username: String!
  year: Int
}