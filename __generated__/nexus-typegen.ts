/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context as Context } from "./../api/context"
import type { FieldAuthorizeResolver } from "nexus/dist/plugins/fieldAuthorizePlugin"
import type { core, connectionPluginCore } from "nexus"
import type { ValidateResolver, TransformResolver } from "E:\\social-learning-app\\backend\\lib\\validation-plugin\\validationPlugin"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * The `BigInt` scalar type represents non-fractional signed whole numeric values.
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt
     */
    bigInt<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "BigInt";
    /**
     * The `Byte` scalar type represents byte value as a Buffer
     */
    bytes<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Bytes";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
    /**
     * An arbitrary-precision Decimal type
     */
    decimal<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Decimal";
    /**
     * The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Json";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * The `BigInt` scalar type represents non-fractional signed whole numeric values.
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt
     */
    bigInt<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "BigInt";
    /**
     * The `Byte` scalar type represents byte value as a Buffer
     */
    bytes<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Bytes";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
    /**
     * An arbitrary-precision Decimal type
     */
    decimal<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Decimal";
    /**
     * The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Json";
    /**
     * Adds a Relay-style connection to the type, with numerous options for configuration
     *
     * @see https://nexusjs.org/docs/plugins/connection
     */
    connectionField<FieldName extends string>(
      fieldName: FieldName,
      config: connectionPluginCore.ConnectionFieldConfig<TypeName, FieldName>
    ): void
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  ProfileCreateInput: { // input type
    avatar?: string | null; // String
    bio: string; // String!
    college: number; // Int!
    firstName: string; // String!
    lastName: string; // String!
    locale: NexusGenEnums['Locale']; // Locale!
    university: number; // Int!
    username: string; // String!
    year: number; // Int!
  }
}

export interface NexusGenEnums {
  Locale: "ARABIC" | "ENGLISH"
  Provider: "GOOGLE"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  BigInt: any
  Bytes: any
  DateTime: any
  Decimal: any
  Json: any
}

export interface NexusGenObjects {
  Discussion: { // root type
    authorId: number; // Int!
    body: string; // String!
    college: number; // Int!
    commentsCount: number; // Int!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    downvotesCount: number; // Int!
    id: number; // Int!
    tags: string[]; // [String!]!
    university: number; // Int!
    upvotesCount: number; // Int!
    year: number; // Int!
  }
  DiscussionConnection: { // root type
    edges: NexusGenRootTypes['DiscussionEdge'][]; // [DiscussionEdge!]!
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  DiscussionEdge: { // root type
    cursor: string; // String!
    node: NexusGenRootTypes['Discussion']; // Discussion!
  }
  EduOrgs: { // root type
    colleges: NexusGenScalars['Json']; // Json!
    tags: NexusGenScalars['Json']; // Json!
    universities: NexusGenScalars['Json']; // Json!
  }
  EduOrgsInfo: { // root type
    eduOrgs?: NexusGenRootTypes['EduOrgs'] | null; // EduOrgs
    version: number; // Int!
  }
  LoginResponse: { // root type
    accessToken: string; // String!
  }
  Mutation: {};
  PageInfo: { // root type
    endCursor?: string | null; // String
    hasNextPage: boolean; // Boolean!
    hasPreviousPage: boolean; // Boolean!
    startCursor?: string | null; // String
  }
  Profile: { // root type
    bio: string; // String!
    college: number; // Int!
    locale: NexusGenEnums['Locale']; // Locale!
    university: number; // Int!
    userId: number; // Int!
    year: number; // Int!
  }
  Query: {};
  User: { // root type
    avatar?: string | null; // String
    email?: string | null; // String
    firstName: string; // String!
    followersCount: number; // Int!
    followingCount: number; // Int!
    id: number; // Int!
    isActive: boolean; // Boolean!
    isVerified: boolean; // Boolean!
    joinedAt: NexusGenScalars['DateTime']; // DateTime!
    lastName: string; // String!
    provider: NexusGenEnums['Provider']; // Provider!
    reputation: number; // Int!
    username: string; // String!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Discussion: { // field return type
    author: NexusGenRootTypes['User']; // User!
    authorId: number; // Int!
    body: string; // String!
    college: number; // Int!
    commentsCount: number; // Int!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    downvotesCount: number; // Int!
    id: number; // Int!
    tags: string[]; // [String!]!
    university: number; // Int!
    upvotesCount: number; // Int!
    year: number; // Int!
  }
  DiscussionConnection: { // field return type
    edges: NexusGenRootTypes['DiscussionEdge'][]; // [DiscussionEdge!]!
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  DiscussionEdge: { // field return type
    cursor: string; // String!
    node: NexusGenRootTypes['Discussion']; // Discussion!
  }
  EduOrgs: { // field return type
    colleges: NexusGenScalars['Json']; // Json!
    tags: NexusGenScalars['Json']; // Json!
    universities: NexusGenScalars['Json']; // Json!
  }
  EduOrgsInfo: { // field return type
    eduOrgs: NexusGenRootTypes['EduOrgs'] | null; // EduOrgs
    version: number; // Int!
  }
  LoginResponse: { // field return type
    accessToken: string; // String!
  }
  Mutation: { // field return type
    createProfile: NexusGenRootTypes['User']; // User!
    loginWithProvider: NexusGenRootTypes['LoginResponse']; // LoginResponse!
    logout: boolean; // Boolean!
  }
  PageInfo: { // field return type
    endCursor: string | null; // String
    hasNextPage: boolean; // Boolean!
    hasPreviousPage: boolean; // Boolean!
    startCursor: string | null; // String
  }
  Profile: { // field return type
    bio: string; // String!
    college: number; // Int!
    locale: NexusGenEnums['Locale']; // Locale!
    university: number; // Int!
    userId: number; // Int!
    year: number; // Int!
  }
  Query: { // field return type
    discussions: NexusGenRootTypes['DiscussionConnection']; // DiscussionConnection!
    eduOrgsInfo: NexusGenRootTypes['EduOrgsInfo']; // EduOrgsInfo!
    me: NexusGenRootTypes['User']; // User!
  }
  User: { // field return type
    avatar: string | null; // String
    email: string | null; // String
    firstName: string; // String!
    followersCount: number; // Int!
    followingCount: number; // Int!
    id: number; // Int!
    isActive: boolean; // Boolean!
    isVerified: boolean; // Boolean!
    joinedAt: NexusGenScalars['DateTime']; // DateTime!
    lastName: string; // String!
    profile: NexusGenRootTypes['Profile'] | null; // Profile
    provider: NexusGenEnums['Provider']; // Provider!
    reputation: number; // Int!
    username: string; // String!
  }
}

export interface NexusGenFieldTypeNames {
  Discussion: { // field return type name
    author: 'User'
    authorId: 'Int'
    body: 'String'
    college: 'Int'
    commentsCount: 'Int'
    createdAt: 'DateTime'
    downvotesCount: 'Int'
    id: 'Int'
    tags: 'String'
    university: 'Int'
    upvotesCount: 'Int'
    year: 'Int'
  }
  DiscussionConnection: { // field return type name
    edges: 'DiscussionEdge'
    pageInfo: 'PageInfo'
  }
  DiscussionEdge: { // field return type name
    cursor: 'String'
    node: 'Discussion'
  }
  EduOrgs: { // field return type name
    colleges: 'Json'
    tags: 'Json'
    universities: 'Json'
  }
  EduOrgsInfo: { // field return type name
    eduOrgs: 'EduOrgs'
    version: 'Int'
  }
  LoginResponse: { // field return type name
    accessToken: 'String'
  }
  Mutation: { // field return type name
    createProfile: 'User'
    loginWithProvider: 'LoginResponse'
    logout: 'Boolean'
  }
  PageInfo: { // field return type name
    endCursor: 'String'
    hasNextPage: 'Boolean'
    hasPreviousPage: 'Boolean'
    startCursor: 'String'
  }
  Profile: { // field return type name
    bio: 'String'
    college: 'Int'
    locale: 'Locale'
    university: 'Int'
    userId: 'Int'
    year: 'Int'
  }
  Query: { // field return type name
    discussions: 'DiscussionConnection'
    eduOrgsInfo: 'EduOrgsInfo'
    me: 'User'
  }
  User: { // field return type name
    avatar: 'String'
    email: 'String'
    firstName: 'String'
    followersCount: 'Int'
    followingCount: 'Int'
    id: 'Int'
    isActive: 'Boolean'
    isVerified: 'Boolean'
    joinedAt: 'DateTime'
    lastName: 'String'
    profile: 'Profile'
    provider: 'Provider'
    reputation: 'Int'
    username: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createProfile: { // args
      profileCreateInput: NexusGenInputs['ProfileCreateInput']; // ProfileCreateInput!
    }
    loginWithProvider: { // args
      code: string; // String!
      provider: NexusGenEnums['Provider']; // Provider!
    }
  }
  Query: {
    discussions: { // args
      after?: string | null; // String
      before?: string | null; // String
      first?: number | null; // Int
      last?: number | null; // Int
    }
    eduOrgsInfo: { // args
      cachedVersion?: number | null; // Int
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Authorization for an individual field. Returning "true"
     * or "Promise<true>" means the field can be accessed.
     * Returning "false" or "Promise<false>" will respond
     * with a "Not Authorized" error for the field.
     * Returning or throwing an error will also prevent the
     * resolver from executing.
     */
    authorize?: FieldAuthorizeResolver<TypeName, FieldName>
    
    /**
     * Validation for arguments
     */
    validate?: ValidateResolver<TypeName, FieldName>
    /**
     * Transformation for arguments
     */
    transform?: TransformResolver<TypeName, FieldName>
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}