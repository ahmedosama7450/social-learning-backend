/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context as Context } from "./../api/context"
import type { ComputeResolver } from "E:\\social-learning-app\\backend\\lib\\computePlugin"
import type { FieldAuthorizeResolver } from "nexus/dist/plugins/fieldAuthorizePlugin"
import type { ValidateResolver, TransformResolver } from "E:\\social-learning-app\\backend\\node_modules\\nexus-args-validator\\dist"
import type { core, connectionPluginCore } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * The `BigInt` scalar type represents non-fractional signed whole numeric values.
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt
     */
    bigInt<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "BigInt";
    /**
     * The `Byte` scalar type represents byte value as a Buffer
     */
    bytes<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Bytes";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
    /**
     * An arbitrary-precision Decimal type
     */
    decimal<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Decimal";
    /**
     * The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Json";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * The `BigInt` scalar type represents non-fractional signed whole numeric values.
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt
     */
    bigInt<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "BigInt";
    /**
     * The `Byte` scalar type represents byte value as a Buffer
     */
    bytes<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Bytes";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
    /**
     * An arbitrary-precision Decimal type
     */
    decimal<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Decimal";
    /**
     * The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Json";
    /**
     * Adds a Relay-style connection to the type, with numerous options for configuration
     *
     * @see https://nexusjs.org/docs/plugins/connection
     */
    connectionField<FieldName extends string>(
      fieldName: FieldName,
      config: connectionPluginCore.ConnectionFieldConfig<TypeName, FieldName>
    ): void
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  CommentCreateInput: { // input type
    attachments?: string[] | null; // [String!]
    body: string; // String!
    parentReplyId?: string | null; // String
    postId: string; // String!
  }
  CommentEditInput: { // input type
    attachments?: string[] | null; // [String!]
    body: string; // String!
  }
  PostCreateInput: { // input type
    attachments?: string[] | null; // [String!]
    body: string; // String!
    collegeId?: number | null; // Int
    coverUrl?: string | null; // String
    isPublished: boolean; // Boolean!
    tagsIds?: string[] | null; // [String!]
    title: string; // String!
    type: NexusGenEnums['PostType']; // PostType!
    universityId?: number | null; // Int
    year?: number | null; // Int
  }
  PostEditInput: { // input type
    attachments?: string[] | null; // [String!]
    body: string; // String!
    collegeId?: number | null; // Int
    coverUrl?: string | null; // String
    isPublished: boolean; // Boolean!
    tagsIds?: string[] | null; // [String!]
    title: string; // String!
    universityId?: number | null; // Int
    year?: number | null; // Int
  }
  PostsWhereInput: { // input type
    authorId?: string | null; // String
    collegeId?: number | null; // Int
    isPublished?: boolean | null; // Boolean
    tagsIds?: string[] | null; // [String!]
    type: NexusGenEnums['PostType']; // PostType!
    universityId?: number | null; // Int
    year?: number | null; // Int
  }
  UserCreateInput: { // input type
    avatar?: string | null; // String
    bio: string; // String!
    collegeId?: number | null; // Int
    firstName: string; // String!
    lastName: string; // String!
    locale: NexusGenEnums['Locale']; // Locale!
    universityId?: number | null; // Int
    username: string; // String!
    year?: number | null; // Int
  }
}

export interface NexusGenEnums {
  CommentsSortingOption: "MOST_ACTIVE" | "MOST_RECENT" | "MOST_VOTED"
  Locale: "ARABIC" | "ENGLISH"
  PostType: "ARTICLE" | "DISCUSSION" | "QUESTION"
  PostsSortingOption: "MOST_RECENT" | "MOST_VOTED" | "TRENDING"
  Provider: "GOOGLE"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  BigInt: any
  Bytes: any
  DateTime: any
  Decimal: any
  Json: any
}

export interface NexusGenObjects {
  Comment: { // root type
    attachments?: string[] | null; // [String!]
    authorId: string; // String!
    body: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    downvotesCount: number; // Int!
    id: string; // ID!
    parentReplyId?: string | null; // String
    postId: string; // String!
    upvotesCount: number; // Int!
    votesCount: number; // Int!
  }
  CommentConnection: { // root type
    edges: NexusGenRootTypes['CommentEdge'][]; // [CommentEdge!]!
    nodes: NexusGenRootTypes['Comment'][]; // [Comment!]!
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  CommentEdge: { // root type
    cursor: string; // String!
    node: NexusGenRootTypes['Comment']; // Comment!
  }
  EduOrgs: { // root type
    colleges: NexusGenScalars['Json']; // Json!
    tags: NexusGenScalars['Json']; // Json!
    universities: NexusGenScalars['Json']; // Json!
  }
  EduOrgsInfo: { // root type
    eduOrgs?: NexusGenRootTypes['EduOrgs'] | null; // EduOrgs
    version: number; // Int!
  }
  LoginResponse: { // root type
    accessToken: string; // String!
  }
  Mutation: {};
  PageInfo: { // root type
    endCursor?: string | null; // String
    hasNextPage: boolean; // Boolean!
    hasPreviousPage: boolean; // Boolean!
    startCursor?: string | null; // String
  }
  Post: { // root type
    acceptedAnswerId?: string | null; // String
    answersCount?: number | null; // Int
    attachments?: string[] | null; // [String!]
    authorId: string; // String!
    body: string; // String!
    collegeId?: number | null; // Int
    commentsCount: number; // Int!
    coverUrl?: string | null; // String
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    downvotesCount: number; // Int!
    id: string; // ID!
    isPublished: boolean; // Boolean!
    ranking: number; // Int!
    sharesCount: number; // Int!
    tagsIds?: string[] | null; // [String!]
    title: string; // String!
    type: NexusGenEnums['PostType']; // PostType!
    universityId?: number | null; // Int
    upvotesCount: number; // Int!
    viewsCount: number; // Int!
    votesCount: number; // Int!
    year?: number | null; // Int
  }
  PostConnection: { // root type
    edges: NexusGenRootTypes['PostEdge'][]; // [PostEdge!]!
    nodes: NexusGenRootTypes['Post'][]; // [Post!]!
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  PostEdge: { // root type
    cursor: string; // String!
    node: NexusGenRootTypes['Post']; // Post!
  }
  Profile: { // root type
    bio: string; // String!
    collegeId?: number | null; // Int
    locale: NexusGenEnums['Locale']; // Locale!
    universityId?: number | null; // Int
    year?: number | null; // Int
  }
  Query: {};
  TempUserInfo: { // root type
    email?: string | null; // String
    firstName: string; // String!
    id: string; // ID!
    lastName: string; // String!
    username: string; // String!
  }
  User: { // root type
    answersCount: number; // Int!
    articlesCount: number; // Int!
    avatar?: string | null; // String
    commentsCount: number; // Int!
    discussionsCount: number; // Int!
    firstName: string; // String!
    followersCount: number; // Int!
    followingCount: number; // Int!
    id: string; // ID!
    joinedAt: NexusGenScalars['DateTime']; // DateTime!
    lastName: string; // String!
    provider: NexusGenEnums['Provider']; // Provider!
    questionsCount: number; // Int!
    reputation: number; // Int!
    username: string; // String!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Comment: { // field return type
    attachments: string[] | null; // [String!]
    author: NexusGenRootTypes['User']; // User!
    authorId: string; // String!
    body: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    downvotesCount: number; // Int!
    id: string; // ID!
    parentReply: NexusGenRootTypes['Comment'] | null; // Comment
    parentReplyId: string | null; // String
    post: NexusGenRootTypes['Post']; // Post!
    postId: string; // String!
    upvotesCount: number; // Int!
    votesCount: number; // Int!
  }
  CommentConnection: { // field return type
    edges: NexusGenRootTypes['CommentEdge'][]; // [CommentEdge!]!
    nodes: NexusGenRootTypes['Comment'][]; // [Comment!]!
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  CommentEdge: { // field return type
    cursor: string; // String!
    node: NexusGenRootTypes['Comment']; // Comment!
  }
  EduOrgs: { // field return type
    colleges: NexusGenScalars['Json']; // Json!
    tags: NexusGenScalars['Json']; // Json!
    universities: NexusGenScalars['Json']; // Json!
  }
  EduOrgsInfo: { // field return type
    eduOrgs: NexusGenRootTypes['EduOrgs'] | null; // EduOrgs
    version: number; // Int!
  }
  LoginResponse: { // field return type
    accessToken: string; // String!
  }
  Mutation: { // field return type
    createComment: boolean; // Boolean!
    createPost: string; // ID!
    createUser: NexusGenRootTypes['LoginResponse']; // LoginResponse!
    deleteComment: boolean; // Boolean!
    deletePost: string; // ID!
    editComment: boolean; // Boolean!
    editPost: boolean; // Boolean!
    loginWithProvider: NexusGenRootTypes['LoginResponse']; // LoginResponse!
    logout: boolean; // Boolean!
  }
  PageInfo: { // field return type
    endCursor: string | null; // String
    hasNextPage: boolean; // Boolean!
    hasPreviousPage: boolean; // Boolean!
    startCursor: string | null; // String
  }
  Post: { // field return type
    acceptedAnswer: NexusGenRootTypes['Comment'] | null; // Comment
    acceptedAnswerId: string | null; // String
    answersCount: number | null; // Int
    attachments: string[] | null; // [String!]
    author: NexusGenRootTypes['User']; // User!
    authorId: string; // String!
    body: string; // String!
    collegeId: number | null; // Int
    commentsCount: number; // Int!
    coverUrl: string | null; // String
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    downvotesCount: number; // Int!
    id: string; // ID!
    isPublished: boolean; // Boolean!
    ranking: number; // Int!
    sharesCount: number; // Int!
    tagsIds: string[] | null; // [String!]
    title: string; // String!
    type: NexusGenEnums['PostType']; // PostType!
    universityId: number | null; // Int
    upvotesCount: number; // Int!
    viewsCount: number; // Int!
    votesCount: number; // Int!
    year: number | null; // Int
  }
  PostConnection: { // field return type
    edges: NexusGenRootTypes['PostEdge'][]; // [PostEdge!]!
    nodes: NexusGenRootTypes['Post'][]; // [Post!]!
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  PostEdge: { // field return type
    cursor: string; // String!
    node: NexusGenRootTypes['Post']; // Post!
  }
  Profile: { // field return type
    bio: string; // String!
    collegeId: number | null; // Int
    locale: NexusGenEnums['Locale']; // Locale!
    universityId: number | null; // Int
    year: number | null; // Int
  }
  Query: { // field return type
    comment: NexusGenRootTypes['Comment']; // Comment!
    comments: NexusGenRootTypes['CommentConnection']; // CommentConnection!
    eduOrgsInfo: NexusGenRootTypes['EduOrgsInfo']; // EduOrgsInfo!
    fakeLogin: NexusGenRootTypes['LoginResponse']; // LoginResponse!
    me: NexusGenRootTypes['User']; // User!
    newsfeed: NexusGenRootTypes['PostConnection']; // PostConnection!
    post: NexusGenRootTypes['Post']; // Post!
    posts: NexusGenRootTypes['PostConnection']; // PostConnection!
    tempUserInfo: NexusGenRootTypes['TempUserInfo']; // TempUserInfo!
  }
  TempUserInfo: { // field return type
    email: string | null; // String
    firstName: string; // String!
    id: string; // ID!
    lastName: string; // String!
    username: string; // String!
  }
  User: { // field return type
    answersCount: number; // Int!
    articlesCount: number; // Int!
    avatar: string | null; // String
    commentsCount: number; // Int!
    discussionsCount: number; // Int!
    firstName: string; // String!
    followersCount: number; // Int!
    followingCount: number; // Int!
    id: string; // ID!
    joinedAt: NexusGenScalars['DateTime']; // DateTime!
    lastName: string; // String!
    profile: NexusGenRootTypes['Profile']; // Profile!
    provider: NexusGenEnums['Provider']; // Provider!
    questionsCount: number; // Int!
    reputation: number; // Int!
    username: string; // String!
  }
}

export interface NexusGenFieldTypeNames {
  Comment: { // field return type name
    attachments: 'String'
    author: 'User'
    authorId: 'String'
    body: 'String'
    createdAt: 'DateTime'
    downvotesCount: 'Int'
    id: 'ID'
    parentReply: 'Comment'
    parentReplyId: 'String'
    post: 'Post'
    postId: 'String'
    upvotesCount: 'Int'
    votesCount: 'Int'
  }
  CommentConnection: { // field return type name
    edges: 'CommentEdge'
    nodes: 'Comment'
    pageInfo: 'PageInfo'
  }
  CommentEdge: { // field return type name
    cursor: 'String'
    node: 'Comment'
  }
  EduOrgs: { // field return type name
    colleges: 'Json'
    tags: 'Json'
    universities: 'Json'
  }
  EduOrgsInfo: { // field return type name
    eduOrgs: 'EduOrgs'
    version: 'Int'
  }
  LoginResponse: { // field return type name
    accessToken: 'String'
  }
  Mutation: { // field return type name
    createComment: 'Boolean'
    createPost: 'ID'
    createUser: 'LoginResponse'
    deleteComment: 'Boolean'
    deletePost: 'ID'
    editComment: 'Boolean'
    editPost: 'Boolean'
    loginWithProvider: 'LoginResponse'
    logout: 'Boolean'
  }
  PageInfo: { // field return type name
    endCursor: 'String'
    hasNextPage: 'Boolean'
    hasPreviousPage: 'Boolean'
    startCursor: 'String'
  }
  Post: { // field return type name
    acceptedAnswer: 'Comment'
    acceptedAnswerId: 'String'
    answersCount: 'Int'
    attachments: 'String'
    author: 'User'
    authorId: 'String'
    body: 'String'
    collegeId: 'Int'
    commentsCount: 'Int'
    coverUrl: 'String'
    createdAt: 'DateTime'
    downvotesCount: 'Int'
    id: 'ID'
    isPublished: 'Boolean'
    ranking: 'Int'
    sharesCount: 'Int'
    tagsIds: 'String'
    title: 'String'
    type: 'PostType'
    universityId: 'Int'
    upvotesCount: 'Int'
    viewsCount: 'Int'
    votesCount: 'Int'
    year: 'Int'
  }
  PostConnection: { // field return type name
    edges: 'PostEdge'
    nodes: 'Post'
    pageInfo: 'PageInfo'
  }
  PostEdge: { // field return type name
    cursor: 'String'
    node: 'Post'
  }
  Profile: { // field return type name
    bio: 'String'
    collegeId: 'Int'
    locale: 'Locale'
    universityId: 'Int'
    year: 'Int'
  }
  Query: { // field return type name
    comment: 'Comment'
    comments: 'CommentConnection'
    eduOrgsInfo: 'EduOrgsInfo'
    fakeLogin: 'LoginResponse'
    me: 'User'
    newsfeed: 'PostConnection'
    post: 'Post'
    posts: 'PostConnection'
    tempUserInfo: 'TempUserInfo'
  }
  TempUserInfo: { // field return type name
    email: 'String'
    firstName: 'String'
    id: 'ID'
    lastName: 'String'
    username: 'String'
  }
  User: { // field return type name
    answersCount: 'Int'
    articlesCount: 'Int'
    avatar: 'String'
    commentsCount: 'Int'
    discussionsCount: 'Int'
    firstName: 'String'
    followersCount: 'Int'
    followingCount: 'Int'
    id: 'ID'
    joinedAt: 'DateTime'
    lastName: 'String'
    profile: 'Profile'
    provider: 'Provider'
    questionsCount: 'Int'
    reputation: 'Int'
    username: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createComment: { // args
      commentCreateInput: NexusGenInputs['CommentCreateInput']; // CommentCreateInput!
      isAnswer: boolean; // Boolean!
    }
    createPost: { // args
      postCreateInput: NexusGenInputs['PostCreateInput']; // PostCreateInput!
    }
    createUser: { // args
      userCreateInput: NexusGenInputs['UserCreateInput']; // UserCreateInput!
    }
    deleteComment: { // args
      id: string; // ID!
    }
    deletePost: { // args
      id: string; // ID!
    }
    editComment: { // args
      commentEditInput: NexusGenInputs['CommentEditInput']; // CommentEditInput!
      id: string; // ID!
    }
    editPost: { // args
      id: string; // ID!
      postEditInput: NexusGenInputs['PostEditInput']; // PostEditInput!
    }
    loginWithProvider: { // args
      code: string; // String!
      provider: NexusGenEnums['Provider']; // Provider!
    }
  }
  Query: {
    comment: { // args
      id: string; // ID!
    }
    comments: { // args
      after?: string | null; // String
      first: number; // Int!
      parentReplyId?: string | null; // String
      postId: string; // String!
      queryAnswers: boolean; // Boolean!
      sorting: NexusGenEnums['CommentsSortingOption']; // CommentsSortingOption!
    }
    eduOrgsInfo: { // args
      cachedVersion?: number | null; // Int
    }
    fakeLogin: { // args
      userId: string; // String!
    }
    newsfeed: { // args
      after?: string | null; // String
      first: number; // Int!
    }
    post: { // args
      id: string; // ID!
    }
    posts: { // args
      after?: string | null; // String
      first: number; // Int!
      postsWhereInput: NexusGenInputs['PostsWhereInput']; // PostsWhereInput!
      sorting: NexusGenEnums['PostsSortingOption']; // PostsSortingOption!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Compute expensive operations
     */
    compute?: ComputeResolver<TypeName, FieldName>
    /**
     * Authorization for an individual field. Returning "true"
     * or "Promise<true>" means the field can be accessed.
     * Returning "false" or "Promise<false>" will respond
     * with a "Not Authorized" error for the field.
     * Returning or throwing an error will also prevent the
     * resolver from executing.
     */
    authorize?: FieldAuthorizeResolver<TypeName, FieldName>
    /**
     * Validation for arguments
     */
    validate?: ValidateResolver<TypeName, FieldName>
    /**
     * Transformation for arguments
     */
    transform?: TransformResolver<TypeName, FieldName>
    
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}